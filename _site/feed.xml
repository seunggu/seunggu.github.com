<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>승구 개발 블로그</title>
    <description>A Blog dealing with JavaScript, NodeJS, AngularJS, Ionic, iOS, etc...
</description>
    <link>http://seunggu.github.io/</link>
    <atom:link href="http://seunggu.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 26 Dec 2016 09:43:58 +0900</pubDate>
    <lastBuildDate>Mon, 26 Dec 2016 09:43:58 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Javascript this</title>
        <description>&lt;h2 id=&quot;1-항상-변화하는-this&quot;&gt;1. 항상 변화하는 this&lt;/h2&gt;

&lt;p&gt;Javascript 코드를 작성하다 보면 생각대로 잘 구현도 했는데 결과값이 이상하게 나올 때가 있습니다.
오늘 포스팅 주제인 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 때문에 그런 적도 한 두번이 아닌 것 같습니다.
그 만큼 좀 까다롭고 헷갈리는 javascript의 특징 중 하나입니다.
특히 동적 언어다 보니 디버깅도 쉽지 않아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 하나 잘못쓰다가 시간을 낭비하는 일이 허다합니다.
this가 헷갈리고 어렵게 느껴지는 이유가 코드의 문맥에 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;의 값이 달리지기 때문인데요.
&lt;strong&gt;하지만, 한번 정리하면 크게 어려울 것도 없습니다.&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-global-context&quot;&gt;2. Global Context&lt;/h2&gt;

&lt;p&gt;우선 제일 쉽고 간단한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Global Context&lt;/code&gt;의 this부터 보겠습니다.
Global context에선 아래 코드와 같이 &lt;strong&gt;global object&lt;/strong&gt;을 가르키게 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true -web&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true -node&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-function-context-non-strict-mode&quot;&gt;3. Function Context (non strict mode)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Function Context&lt;/code&gt; this는 그저 함수 내에서 사용되는 this입니다.
이제부터 조금 상황에 따라 다르게 this가 변하므로 정리가 필요합니다.
함수는 보통 대다수의 경우가 호출했을 때의 상황에 따라 this가 변하게 됩니다.
우선 전역에 함수가 설정되어 있고 그 함수내에 this가 있고 
전역에서 함수를 호출한다면 this는 global이 됩니다.
&lt;strong&gt;(정확히 얘기하자면 아래에 나올 object member로써 쓰이지 않으면 참조할 객체가 없고 
‘strict mode’가 아니기 때문에 항상 this는 어떤 객체든 참조해야 하므로 global를 가지는 것입니다)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true -web&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true -node&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-function-context-strict-mode&quot;&gt;4. Function Context (strict mode)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strict mode&lt;/code&gt;에선 약간 다르게 동작합니다.
기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;strict mode&lt;/code&gt;에선 this가 참조할 객체가 없으면 &lt;strong&gt;undefined&lt;/strong&gt;로 나타나게 됩니다.
(아직 지원하지 않는 브라우저가 있을 수 있습니다)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-arrow-function&quot;&gt;5. Arrow function&lt;/h2&gt;

&lt;p&gt;ES6부터 function를 좀 더 표현하기 쉽게된 &lt;code class=&quot;highlighter-rouge&quot;&gt;Arrow function&lt;/code&gt;이 추가되었는데요.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Arrow function&lt;/code&gt;안의 this은 위의 기존 함수들안의 this와는 조금 다르게 동작합니다.
기존 함수는 함수 호출에 따라 this가 달라지지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Arrow function&lt;/code&gt;은 정의할 때의 
&lt;strong&gt;가장 근접한 context의 this&lt;/strong&gt;를 사용하고 언제 어떻게 호출하든 정의할 때의 this로 고정되어 사용됩니다.
아래 코드처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;call, apply, bind&lt;/code&gt;를 통해 강제로 this를 변경하여도 그대로 고정된 값이 사용되고,
&lt;code class=&quot;highlighter-rouge&quot;&gt;object에 member&lt;/code&gt;로 호출하여도 this는 해당 object가 아닌 처음 정의 될때의 global로 적용됩니다.
&lt;strong&gt;(object member나 call, apply, bind는 아래에 설명되어 있으니 이해가 안되시더라도 넘어가면 됩니다)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrowFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrowFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// object member&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// call, apply&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// bind&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-object-member&quot;&gt;6. object member&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;객체의 멤버&lt;/code&gt;로 함수가 사용되면 호출 시점에서 this는 해당 함수를 &lt;strong&gt;멤버로 가지고 있는 객체&lt;/strong&gt;로 지정되게 됩니다.
주의해야 할 점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;객체의 멤버&lt;/code&gt;로 호출될 때는 this가 위처럼 객체가 되지만,
그 객체 멤버 함수를 다른 변수로 대입하여 다르게 호출 될 땐 대입된 함수의 호출시점에 따라 달라지게 됩니다.
아래 코드를 보며 정리하시길 바랍니다
(아래 코드에선 fn은 Global Context에서 사용되었고 strict mode이므로 undefined!)
(이해가 안되시면 Function Context를 다시 보시길 바랍니다)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;그리고 주의 할 점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Prototype Chaining&lt;/code&gt;을 할 때인데, 생각보다 간단합니다.
부모 Prototype에 정의된 함수의 this를 사용할 땐, 아래 코드처럼 마치 자신의 멤버함수처럼 this는 &lt;strong&gt;호출한 객체&lt;/strong&gt;가 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'parentA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'parentB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;printAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// parentAparentB&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// parentObj를 prototype 상속하는 childObj 만듬&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;childObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'childA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;childObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'childB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// childAchildB&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-contructor&quot;&gt;7. Contructor&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;생성자 함수&lt;/code&gt;로 new 연산자를 사용하여 객체를 만드는데요.
&lt;code class=&quot;highlighter-rouge&quot;&gt;생성자 함수&lt;/code&gt;내에서 사용되는 this는 생성자 함수와 new 연산자의 조합으로 만들어진 객체를 나타냅니다.
즉 this는 객체가 만들어지고 &lt;strong&gt;초기화될 객체&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 생성될 객체에 변수 초기화&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Seunggu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Jeong'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// 보통 prototype에 함수를 넣지만 편의상 이렇게 표현 했습니다.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seunggu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seunggu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'Jeong Seunggu'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;8-review-example&quot;&gt;8. review, example&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

	&lt;span class=&quot;na&quot;&gt;fooArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 시나리오 #1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fooArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 시나리오 #2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fooArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;우선 obj는 멤버로 함수를 가지고 있고, 그 함수는 this를 리턴하는 함수를 리턴한다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;시나리오 #1&lt;/code&gt;의 obj.foo부터 보면 obj.foo가 실행되면 안에 foo 함수가 실행되면서 this를 리턴하는 함수가 반환되는데,
어떤 객체의 멤버로 함수가 호출된 것이 아니므로 this는 &lt;strong&gt;undefined&lt;/strong&gt;가 된다.
다음은 obj.fooArray가 실행되면서 this를 리턴하는 Arrow function이 반환되는데,
Arrow function은 가장 인접한 context의 this를 가져오므로 fooArrow context의 this를 가져온다.
결국 this는 &lt;strong&gt;obj&lt;/strong&gt;가 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;시나리오 #2&lt;/code&gt;에선 우선 obj에 있는 멤버 함수들을 모두 전역의 변수로 대입하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;시나리오 #1&lt;/code&gt;와 같이 코드를 돌려보면,
obj.foo의 this는 &lt;code class=&quot;highlighter-rouge&quot;&gt;시나리오 #1&lt;/code&gt;과 같은 이유로 &lt;strong&gt;undefined&lt;/strong&gt;가 되지만, obj.fooArrow의 this는 &lt;code class=&quot;highlighter-rouge&quot;&gt;시나리오 #1&lt;/code&gt;과 결과가 같지 않습니다.
헷갈릴 수도 있지만 천천히 분석해 보시면 &lt;strong&gt;당연한 결과&lt;/strong&gt;입니다.
우선 obj.fooArray를 f2 변수로 대입했고 함수는 호출에 따라 this가 변하므로 
f2가 호출될 땐 객체의 멤버 변수가 아니므로 당연히 &lt;strong&gt;undefined&lt;/strong&gt;가 됩니다.
그리고 Arrow function은 가장 가까운 context의 this를 가져오게 되므로 &lt;strong&gt;undefined&lt;/strong&gt;를 가져오게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;9-마지막으로-call-apply-bind&quot;&gt;9. 마지막으로, call, apply, bind&lt;/h2&gt;

&lt;p&gt;this를 완벽히 마스터하기 위해선 &lt;code class=&quot;highlighter-rouge&quot;&gt;call, apply, bind&lt;/code&gt;까지 이해해야 합니다.
이 세 함수의 역할은 this를 &lt;strong&gt;명시적으로 변경해주는 역할&lt;/strong&gt;입니다.
세 함수 모두 &lt;strong&gt;Function Prototype&lt;/strong&gt;에 존재합니다.
예제를 통해 확인해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'preObj'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;printAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;afterObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'afterObj'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// call, apply를 이용한 this 대입&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// preObj A B&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;afterObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// afterObj A B&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;afterObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// afterObj A B&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// bind를 이용한 this 대입&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;afterObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// afterObj A B&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call, apply&lt;/code&gt;를 보시면 첫번째 인자에 this에 대입할 객체를 넣고, 
두번째 파라미터부터 this를 대입하는 함수의 인자들을 차례대로 넣으면 됩니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;call과 apply&lt;/code&gt;의 차이는 인자를 각각 넣느냐 배열로 넣으냐의 차이입니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;는 조금 다른 개념인게 함수를 사용할 때 사용한단 느낌 보단
함수를 미리 원하는 객체로 this를 바인딩 해놓는 개념입니다.
코드처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;를 이용하여 afterObj를 this로 바인딩된 함수를 반환합니다.
그 함수를 통해 기존의 함수처럼 사용할 수 있습니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-정리&quot;&gt;10. 정리&lt;/h2&gt;

&lt;p&gt;지금까지 this의 다양한 상황에 따른 변화와 this를 수동으로 대체하는 것까지 모두 보았습니다.
이렇게 한번 this를 정리하면 언제 this가 나오더라도 편하게 분석이 가능해서 좋습니다.
영어로 된 문서지만 &lt;strong&gt;참고자료&lt;/strong&gt;를 통해 한번 읽으셔도 좋을 것 같아 밑에 리스팅해 놓았습니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-참고자료&quot;&gt;11. 참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;MDN javascript this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/&quot;&gt;Understand JavaScript’s “this” With Clarity, and Master It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 01 Aug 2016 09:00:00 +0900</pubDate>
        <link>http://seunggu.github.io/javascript/2016/08/01/javascript-this-conquer.html</link>
        <guid isPermaLink="true">http://seunggu.github.io/javascript/2016/08/01/javascript-this-conquer.html</guid>
        
        <category>javascript</category>
        
        <category>this</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Node.js에 대한 고찰과 도입 </title>
        <description>&lt;h2 id=&quot;1-최근-유명-기업들은-왜-nodejs-도입하는가&quot;&gt;1. 최근 유명 기업들은 왜 Node.js 도입하는가&lt;/h2&gt;

&lt;p&gt;최근 많은 해외 유명 기업들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;를 사용하고 있다는 걸 들어보신 적이 있으실겁니다.
그리고 점차 그 추세가 증가하고 있습니다.
대표적인 기업으로는 최근에 MS에 인수가 된 &lt;strong&gt;LinkedIn&lt;/strong&gt;, 올해부터 국내에도 서비스를 시작한 &lt;strong&gt;Netflix&lt;/strong&gt;, 
해외 결제 하실 때마다 보게되는 &lt;strong&gt;PayPal&lt;/strong&gt;이 있습니다.
위 기업들은 세계적으로 유명하고 엄청난 트래픽을 처리하죠. 
2014년 이후부터 기업에서도 Production 환경에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;를 사용하는 일이 실제 일어나고 있습니다.
이 글에서 기업들이 말한 Node.js를 도입하게 된 이유와 느낀 점을 정리하면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;에 대해 조금 더 현실적이고 깊게 이야기를 해보려고 합니다.
(우선 기업들이 도입을 결정한 이유에는 장점만 언급한 경우가 많고, 후에 단점들을 함께 얘기하며 도입시 고려사항을 정리하겠습니다)
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-linkedin-높은-효율성&quot;&gt;2. LinkedIn, 높은 효율성&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;-  &lt;strong&gt;LinkedIn&lt;/strong&gt;&lt;br /&gt;
One of LinkedIn’s biggest win was the 10:1 ratio reduction in the number of machines used to host their services after switching from Ruby on Rails to Node.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedIn&lt;/code&gt;은 기존 RoR서버를 Node로 변경하면서 인프라를 1/10로 줄이게 됬다고 합니다.
이에 대한 장점은 GoDaddy도 언급한 장점이기도 합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;GoDaddy&lt;/code&gt;는 기존 C#으로 작성한 서버의 인프라의 단 &lt;strong&gt;1/10&lt;/strong&gt;만으로
여전히 같은 (오히려 더 많은!!) 트래픽을 처리하고 있다고 합니다. 이 글이 작성된 시기의 &lt;code class=&quot;highlighter-rouge&quot;&gt;GoDaddy&lt;/code&gt; 트래픽은 &lt;strong&gt;초당 170만&lt;/strong&gt;이였다고 합니다.
이렇게 높은 효율의 트래픽 처리가 가능한 것은 Node.js의 &lt;strong&gt;Single Thread 기반의 비동기 처리 IO&lt;/strong&gt; 때문이죠.
보통 동기 프로그래밍에선 IO 작업을 할 경우 처리를 기다리는데 비용을 낭비하게 되는데 
Node.js는 IO작업을 요청하고 다른 일을 하고 요청한 IO작업이 처리가 된 후에 이벤트를 받아 그 후의 일을 계속하기 때문에 효율적으로 IO처리를 하게 되죠.
그래서 보통 Node의 장점에 &lt;a href=&quot;http://www.kegel.com/c10k.html&quot;&gt;c10k problem&lt;/a&gt;에 대해 최적화 되어 있음을 많이 얘기합니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-paypal--netfilx-높은-생산성&quot;&gt;3. PayPal &amp;amp; Netfilx, 높은 생산성&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;- &lt;strong&gt;PayPal&lt;/strong&gt;&lt;br /&gt;
Node.js and an all Javascript development stack helped PayPal bring efficiencies in engineering and helped rethink and reboot product, design and operational thinking.” - Sameera Rao, Sr. Business Products Engineering Manager&lt;br /&gt;
- &lt;strong&gt;Netflix&lt;/strong&gt;&lt;br /&gt;
Using Node.js at Netflix gave a productivity boost to the engineers and improved user experience for the customers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PayPal&lt;/code&gt;의 경우엔 기존 프론트엔드와 백엔드의 언어가 달랐는데 백엔드를 Node.js로 변경하면서
프론트엔드와 백엔드의 언어가 통일되고 팀 전체의 효율이 증가한 것에 큰 도움을 받았다고 합니다.
사실 Node.js가 유명세를 크게 타게 된 것도 프론트엔드 개발자들이 백엔드에 쉽게 다가갈 수 있다는 점이 크게 작용한 것도 사실이고,
Node로 개발을 하는 FullStack 개발자가 많은 것도 사실입니다.
그 만큼 Node가 Javascript란 언어로 다가갈 수 있다는 점이 크게 작용합니다.
보통 Java와 생산성을 비교할 때도 Node를 이용하면 &lt;strong&gt;1/10&lt;/strong&gt;의 시간밖에 들지 않는다고 이야기를 합니다.
많이들 알고 계시지만 &lt;strong&gt;npm(node package manager)&lt;/strong&gt;의 영향력도 무시할 수 없습니다.
많은 모듈들이 사용가능함에 따라 Node 생태계에 들어오는 장벽이 많이 부서졌다고 생각합니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-기타-도입시의-장점&quot;&gt;4. 기타 도입시의 장점&lt;/h2&gt;

&lt;p&gt;위에서 크게 두가지의 장점을 언급했는데요, 앞처럼 큰 장점은 아니지만 간단한 &lt;code class=&quot;highlighter-rouge&quot;&gt;(Web)Socket&lt;/code&gt;를 구현할 때도 좋습니다.
Node.js를 한번 경험해보셨으면 &lt;a href=&quot;http://socket.io&quot;&gt;Socket.io&lt;/a&gt;라고 많이 아실거라 생각합니다.
그리고 무엇보다 빠르게 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로토타이핑&lt;/code&gt;을 해야하는 스타트업 같은 경우 높은 생산성 때문에 좋습니다.
이 경우엔 동적언어를 사용하는 프레임워크(RoR, Django 등) 모두 해당되는 장점입니다.
하지만 MongoDB와 함께 간단한 프로젝트를 만든다면 Node.js와 호환성이 좋으니 Node.js가 월등히 좋죠.
현재 Node.js 프로젝트를 지원하는 기업들(IBM, Intel, MS 등)이 늘어나고 있다는 점도 좋게 볼 수 있습니다.
Javascript가 &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS 패턴&lt;/a&gt;으로 작성되다 보니
코드의 가독성이 안좋다란 말을 많이 듣게 되었는데요. Node.js의 버전 v6에서는 
&lt;a href=&quot;http://es6-features.org/#Constants&quot;&gt;ES6&lt;/a&gt;를 지원하므로 예전의 문제였던 가독성도 더 좋아졌습니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-도입시-꼭-고려해야할-단점&quot;&gt;5. 도입시 꼭 고려해야할 단점&lt;/h2&gt;

&lt;p&gt;위에 이야기들은 모두 Node의 장점들을 나열 하였는데요.
이제 보여드릴 단점 때문에, Node.js의 도입이 이루어지지 않는 경우가 많습니다.
우선 Java의 프레임워크와 비교하면 역사가 짧고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterprise 환경&lt;/code&gt;에서 &lt;strong&gt;검증되지 않은 점&lt;/strong&gt;입니다.
위의 기업들이 Production 환경에서 사용하고 있는 점들은 굉장히 힘이 되는 부분이지만, 
아직은 &lt;strong&gt;의심의 눈초리&lt;/strong&gt;로 Node.js를 보는 입장이 많습니다.
이미 Java 프레임워크들은 현재까지 트래픽이 많은 Enterprise 환경에서 잘 동작해주었고,
그 만큼 검증이 되었으며 안정적이고 사내 개발자 풀도 많습니다. 
국내에선 전자정부 프레임워크라는 장벽도 무시할 수 없구요.
&lt;br /&gt;&lt;br /&gt;
그리고 Node가 Single Thread에서 돌아가는지라 하나의 cpu 작업에 시간이 많이 걸리면, 전체적인 시스템 성능이 굉장히 떨어집니다.
그래서 cpu가 많이 사용되는 프로젝트에선 좋지 않습니다.
실제로 cpu를 많이 사용하게 된 프로젝트를 Node로 한 적이 있었는데 cpu가 정말 기하급수적으로 올라갑니다.
그리고 국내에서 도입할 경우엔 서비스내에서 이메일이나 문자 또는 본인인증관련해서 사용하게 될 경우가 있을 수 있는데,
국내 서드파티에선 Node.js를 잘 지원하지 않는 점도 큰 단점 중 하나입니다.
이메일이나 문자 정도는 해외 서비스를 사용한다고 하지만, 본인인증관련해서는 국내 서비스를 사용할 수 밖에 없으니 생각보다 큰 걸림돌입니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-개인적인-도입가이드&quot;&gt;6. 개인적인 도입가이드&lt;/h2&gt;

&lt;p&gt;저의 개인적인 생각으론 Node.js를 &lt;strong&gt;우호적&lt;/strong&gt;으로 바라보고 있습니다. &lt;strong&gt;높은 효율성과 생산성&lt;/strong&gt; 때문인데요.
하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;를 도입해서 효율을 끌어낼 수 있는 상황과 오히려 반대인 상황을 잘 판단하셔야 합니다.
Node.js는 &lt;strong&gt;장단점이 확실&lt;/strong&gt;하고 잘 사용해야 큰 효율을 발휘 할 수 있습니다.
만약 프로젝트가 무겁고 cpu를 많이 사용한다면 Node.js의 도입은 당연히 좋지 않습니다.
여러 문제가 터질 수 있고 동적언어를 이용하다보니 디버깅도 쉽진 않습니다.
하지만 단순 DB작업을 하거나 간단한 프로젝트일 경우가 Node.js에 적합합니다.
웹서버로써의 역활도 좋고, 생산성도 뛰어나고 효율도 좋은 장점을 적극 활용할 수 있는 프로젝트에서 사용하면 좋습니다.
예를들면, 스타트업에서 프로토타입을 만들기에도 적합하고 인원이 적은 개발팀에서 웹서비스를 만들때에 적은 인원으로 효율을 낼 수 있습니다.
확실히 이런 장단점이 존재하니 잘 판단하셔서 도입을 하시면 좋은 결과를 낼 수 있을 것 같습니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-장점-정리&quot;&gt;7. 장점 정리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;인프라를 적게 사용하는 높은 효율성 == 비용 절감&lt;/li&gt;
  &lt;li&gt;많은 요청을 견대낼 수 있는 힘(c10k 최적화)&lt;/li&gt;
  &lt;li&gt;높은 생산성&lt;/li&gt;
  &lt;li&gt;Front-end와 Back-end 모두 Javascript로 가능&lt;/li&gt;
  &lt;li&gt;커져가는 생태계 (npm, 참여하는 기업들 등)&lt;/li&gt;
  &lt;li&gt;프로토타이핑에 좋음&lt;/li&gt;
  &lt;li&gt;v6부터 ES6로 가독성이 더 좋아짐
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;8-단점-정리&quot;&gt;8. 단점 정리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;cpu 작업에 약함&lt;/li&gt;
  &lt;li&gt;국내에서 사용하기엔 제약이 존재 (국내 써드파티의 지원, 개발자 풀 등)&lt;/li&gt;
  &lt;li&gt;역사가 짧아 안정적이지 않음&lt;/li&gt;
  &lt;li&gt;Enterprise 환경에서의 역활에 대한 의심의 눈초리
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;9-참고자료&quot;&gt;9. 참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://risingstack.com/nodejs-is-enterprise-ready?utm_source=how-enterprises-benefit-from-nodejs&amp;amp;utm_medium=rsblog&amp;amp;utm_campaign=whitepaper&quot;&gt;Node.js is Enterprise Ready&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.htmlhttps://blog.risingstack.com/how-enterprises-benefit-from-nodejs/&quot;&gt;How Enterprises Benefit form Node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rocksea.tistory.com/253&quot;&gt;Node.js에 대한 단상&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bcho.tistory.com/876&quot;&gt;Node.js에 장단점에 대해&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 31 Jul 2016 09:00:00 +0900</pubDate>
        <link>http://seunggu.github.io/node.js/2016/07/31/nodejs-introduction.html</link>
        <guid isPermaLink="true">http://seunggu.github.io/node.js/2016/07/31/nodejs-introduction.html</guid>
        
        <category>node.js</category>
        
        <category>tech stack</category>
        
        
        <category>node.js</category>
        
      </item>
    
      <item>
        <title>S3 Versioning에 대해 알아보기</title>
        <description>&lt;h2 id=&quot;1-s3-versioning&quot;&gt;1. S3 Versioning&lt;/h2&gt;

&lt;p&gt;최근에 S3을 주로 사용하는 프로젝트를 진행하고 있습니다.
비지니스 로직에 필요한 부분이 같은 파일(같은 S3 key를 가지는 파일)을 조금씩 수정하여 S3에 저장하는
프로세스가 있어 S3에 문서를 훓어 보다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;S3 Versioning&lt;/code&gt;이라는 것을 발견했습니다.
단순히 설명을 하면, Git처럼 S3에 올린 파일에 대해서 버전관리를 해주는 것인데요.
비지니스 로직이 단순히 S3에 파일을 저장하고 그게 끝이라면 딱히 필요없는 기능이지만,
현재 진행하는 프로젝트처럼 동일한 파일을 다시 자주하는 수정하는 로직이 필요하다면 
생각해볼만한 좋은 기능입니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-version-id&quot;&gt;2. Version id&lt;/h2&gt;

&lt;p&gt;S3에 Bucket은 기본적으로 Versioning이 켜지지 않은 상태로 되어있고 
Versioning은 &lt;strong&gt;Bucket 단위&lt;/strong&gt;로만 켜고 끌 수 있습니다.
Versioning을 시작하려면 AWS Console에서는 간단히 변경할 수 있습니다.
아래의 사진처럼 Bucket Property에 Versioning 관련 속성이 있어서 
&lt;strong&gt;Enable Versioning&lt;/strong&gt; 버튼만 누르면
해당 Bucket은 Versioning이 켜지게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/s3-versioning/console.png&quot; alt=&quot;s3-console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bucket의 Object(파일)은 Versioning이 켜져 있든 아니든 
모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;version id&lt;/code&gt; 메타데이터를 가지고 있습니다.
그리고 Versioning이 꺼져 있을 경우는 &lt;strong&gt;null&lt;/strong&gt; 값을 가지게 되고 
Versioning을 키고 Object를 업로드 할 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;version id&lt;/code&gt;에 S3에서 &lt;strong&gt;자동&lt;/strong&gt;으로 지정하게 됩니다.
이렇게 Versioning을 &lt;code class=&quot;highlighter-rouge&quot;&gt;version id&lt;/code&gt;를 기준으로 작동하게 됩니다.
(예를 들면 Git의 &lt;strong&gt;commit hash&lt;/strong&gt;와 비슷하다고 볼 수 있습니다.)
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-current-vs-noncurrent&quot;&gt;3. current vs noncurrent&lt;/h2&gt;

&lt;p&gt;S3 Versioning은 이 version id를 가지고 Object들을 관리하게 됩니다.
기존에 파일을 하나 업로드한 뒤 S3 Key가 동일하도록 같은 이름의 파일을 다시 업로드 하면
Versioning은 기존 파일 위에 파일을 저장하게 됩니다.
그리고 파일에 접근 할 땐 제일 최근의 것으로 접근하게 됩니다.
여기서 제일 최근의 Object를 &lt;code class=&quot;highlighter-rouge&quot;&gt;current version&lt;/code&gt;라 부르고 
기존의 Object를 &lt;code class=&quot;highlighter-rouge&quot;&gt;noncurrent version&lt;/code&gt;이라 부릅니다.
S3 Key를 이용하여 Object를 불러오면 &lt;code class=&quot;highlighter-rouge&quot;&gt;current version&lt;/code&gt;의 Object를 가져오지만
&lt;code class=&quot;highlighter-rouge&quot;&gt;noncurrent version&lt;/code&gt;의 Object를 가져오려면 &lt;strong&gt;version id&lt;/strong&gt;를 사용하여 가져 올 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/s3-versioning/version-id-console.png&quot; alt=&quot;version-id-console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-delete-marker&quot;&gt;4. Delete Marker&lt;/h2&gt;

&lt;p&gt;당연히 Versioning을 이용하면 삭제된 Object도 복구 할 수 있습니다.
이런 기능이 가능한 이유는 Versioning을 켜놓았을 경우 S3는 해당 Object를 삭제 하지 않습니다.
그 대신 Version id &lt;code class=&quot;highlighter-rouge&quot;&gt;Delete Marker&lt;/code&gt;를 &lt;strong&gt;current version&lt;/strong&gt;으로 설정합니다.
그래서 삭제한 경우엔 &lt;strong&gt;current version&lt;/strong&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Delete Marker&lt;/code&gt;이기 때문에
삭제된 문서로 인식하지만, &lt;strong&gt;noncurrent version&lt;/strong&gt;의 Object로 
언제든지 복구가능하고 가져 올 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/s3-versioning/delete-marker.png&quot; alt=&quot;delete-marker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/s3-versioning/delete-marker-console.png&quot; alt=&quot;delete-maker-console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-lifecycle-configuration-for-a-bucket-with-versioning&quot;&gt;5. Lifecycle Configuration for a Bucket with Versioning&lt;/h2&gt;

&lt;p&gt;기본적으로 S3는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lifecyle Configuration&lt;/code&gt;을 지원합니다.
간단한 예를 들면, 만약 프로젝트에서 S3에 Object를 생성하고 
해당 Object가 생성 후 1년뒤에 필요가 없어진다면 
굳이 필요없는 Object를 저장해 둘 필요가 없습니다.
S3는 저장된 용량에 따라 월비용을 내야되기 때문에 
사용하지 않는 Object는 지워주는게 비용을 절감할 수 있습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Lifecyle Configuration&lt;/code&gt;을 통해 Object를 생성 후 1년뒤에 삭제되도록 설정하면
자동으로 지워지게 되기 때문에 신경을 크게 쓰지않고 비용을 절감 할 수 있습니다&lt;/p&gt;

&lt;p&gt;Versioning의 좋은 점은 &lt;strong&gt;current version&lt;/strong&gt;과 &lt;strong&gt;noncurrent version&lt;/strong&gt;에 대해
각각 따로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lifecyle Configuration&lt;/code&gt;이 가능하기 때문에 더욱 쉽게 Object들을 관리하여
비용을 절감 할 수 있습니다. 저도 이 장점이 Versioning을 사용하게된 큰 이유 중 하나입니다.
(Lifecycle에 대한 내용은 이 글에서 주제에 벗어나므로 참고자료에 링크 걸어 두었습니다)
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-장점&quot;&gt;6. 장점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;version에 따른 Lifecycle Configuration이 가능하다.&lt;/li&gt;
  &lt;li&gt;같은 파일에 대해 덮어쓸 때 기존의 데이터도 보관하고 싶은데 비용이 걱정될 때가 적절하다.&lt;/li&gt;
  &lt;li&gt;Versioning을 사용하지 않을 때와 비용하여 동일한 
Object를 삭제할 때 일일이 찾아서 삭제 하지않고 한번에 삭제 가능하다.&lt;/li&gt;
  &lt;li&gt;삭제한 Object를 복구할 수 있다.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-단점&quot;&gt;7. 단점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;아무래도 널리 사용되는 S3의 기능이 아니다 보니 다른 개발자가 와서 일을 할 시에 배워야한다.&lt;/li&gt;
  &lt;li&gt;Bucket 단위로만 Versioning 설정이 되어 아쉽다.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;8-참고자료&quot;&gt;8. 참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectVersioning.html&quot;&gt;AWS 공식 문서(Object Lifecycle Management)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html&quot;&gt;AWS 공식 문서(Using Versioning)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/UG/lifecycle-configuration-bucket-with-versioning.html&quot;&gt;AWS 공식 문서(Lifecycle Configuration for a Bucket with Versioning)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 04 Jul 2016 09:00:00 +0900</pubDate>
        <link>http://seunggu.github.io/aws/2016/07/04/s3.versioning.html</link>
        <guid isPermaLink="true">http://seunggu.github.io/aws/2016/07/04/s3.versioning.html</guid>
        
        <category>aws</category>
        
        <category>s3</category>
        
        <category>s3 versioning</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>S3 Versioning</title>
        <description>&lt;p&gt;exports.testHistory = function(req, res) {
  Contract.findOne({
    attributes: [‘contractPDFUrl’, ‘contractPDFS3Key’, ‘title’, ‘status’, ‘currentParticipantId’,
      ‘currentParticipationOrder’, ‘totalParticipantCount’, ‘createdAt’],
    where: {
      id: 156
    },
    include: [{
      model: Participant,
      attributes: [‘name’, ‘email’, ‘order’, ‘role’, ‘signedAt’],
      include: [{
        model: ParticipantAuth,
        attributes: [‘type’, ‘question’, ‘answer’, ‘authAt’]
      }, {
        model: ParticipantInput,
        attributes: [‘inputType’, ‘value’, ‘s3Key’]
      }]
    }]
  }).then(function(contract) {
    console.log(contract.get({plain: true}));
    // 이력 정보 만들기
  });
};&lt;/p&gt;

&lt;p&gt;function makeHistoryArray(contract) {
  var historyArray = [],
    participants = contract.participants,
    participantLength = participants.length,
    writer = getWriter(participants);&lt;/p&gt;

&lt;p&gt;historyArray.push(makeUploadHistory());
  historyArray.push(makeStartSignatureHistory());
  historyArray.concat(makeRequestSignatureHistoryArray());
  // TODO - 인증 실패 이력&lt;/p&gt;

&lt;p&gt;// 업로드 이력 만들기
  function makeUploadHistory() {
    return {
      title: writer.name + ‘(‘ + writer.email + ‘)님이 ‘ + contract.title + ‘을 업로드 하였습니다’,
      time: contract.createdAt
    };
  }&lt;/p&gt;

&lt;p&gt;// 서명 진행시작 알림 이력 만들기
  function makeStartSignatureHistory() {
    return {
      title: ‘요청자(이메일)님이 문서의 서명 요청을 시작하였습니다.’,
      time: contract.createdAt
    };
  }&lt;/p&gt;

&lt;p&gt;// 서명 요청 이력 만들기
  function makeRequestSignatureHistoryArray() {
    var i, length = participantLength,
      currentParticipationOrder = contract.currentParticipationOrder,
      requestSignatureHistoryArray = [];&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 현재 서명참여 순서 이전의 모든 `서명인`에 해당
for (i = 0; i &amp;lt; length; i += 1) {
  if (participants[i].role === '서명인' &amp;amp;&amp;amp; participants[i].order &amp;lt;= currentParticipationOrder) {
    requestSignatureHistoryArray.push({
      title: writer.name + '(' + writer.email + ')님이 ' +
      participants[i].name + '(' + participants[i].email + ')님에게 문서의 서명을 요청하였습니다.',
      time: participants[i].requestedAt
    });
  }
}
return requestSignatureHistoryArray;   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;// 인증 성공 이력 만들기
  function makeAuthSuccessHistoryArray() {
    var i, length = participantLength;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;참여자 배열에서 작성인을 찾아서 반환하는 메서드
 *&lt;/li&gt;
  &lt;li&gt;@param participants - 참여자 배열&lt;/li&gt;
  &lt;li&gt;@returns {*}
 */
function getWriter(participants) {
  var i, length = participants.length;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;for (i = 0; i &amp;lt; length; i += 1) {
    if (participants[i].role === ‘작성인’) {
      return participants[i];
    }
  }
}&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0900</pubDate>
        <link>http://seunggu.github.io/2016/07/04/s3-versioning.html</link>
        <guid isPermaLink="true">http://seunggu.github.io/2016/07/04/s3-versioning.html</guid>
        
        
      </item>
    
      <item>
        <title>반갑습니다</title>
        <description>&lt;h2 id=&quot;반갑습니다&quot;&gt;반갑습니다!&lt;/h2&gt;

&lt;p&gt;예전부터 미뤄온 일을 하는 것처럼 막막하고 어떻게 시작해야될지 깜깜하지만
이렇게 시작을 하다가 보면 습관이 되고 더욱 편해질 것 같아 &lt;strong&gt;시작이 반&lt;/strong&gt;이라는 마음으로 첫 블로그 글을 써 내려가 봅니다.&lt;/p&gt;

&lt;p&gt;매일 개발을 하면서 느끼는 것도 있고 배워가는 것들이 많지만, 
이렇게 글을 쓰거나 메모를 하지 않으면 금새 잊혀져가는게 안타깝고
다른 개발자분들과 공유하며 피드백도 받고 싶어 시작하게 되었습니다.&lt;/p&gt;

&lt;p&gt;많은 이야기를 함께 했으면 좋겠습니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jul 2016 06:52:00 +0900</pubDate>
        <link>http://seunggu.github.io/%EC%9D%B8%EC%82%AC/2016/07/03/greeting.html</link>
        <guid isPermaLink="true">http://seunggu.github.io/%EC%9D%B8%EC%82%AC/2016/07/03/greeting.html</guid>
        
        <category>인사</category>
        
        
        <category>인사</category>
        
      </item>
    
  </channel>
</rss>
